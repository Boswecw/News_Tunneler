import { formatDistanceToNow, format } from 'date-fns'
import type { Article } from '../lib/store'
import { fetchPlan } from '../lib/api'

interface AlertRowProps {
  article: Article
  onAnalyze?: (articleId: number) => void
}

export default function AlertRow(props: AlertRowProps) {
  const scoreColor = () => {
    const score = props.article.score || 0
    if (score >= 18) return 'text-green-600 dark:text-green-400'
    if (score >= 15) return 'text-blue-600 dark:text-blue-400'
    if (score >= 12) return 'text-yellow-600 dark:text-yellow-400'
    return 'text-gray-600 dark:text-gray-400'
  }

  const handleDownloadSynopsis = async () => {
    try {
      // Fetch the plan data
      const plan = await fetchPlan(props.article.id)

      if (!plan || !plan.llm_plan) {
        alert('No analysis available for this article. Please analyze it first.')
        return
      }

      const llmPlan = plan.llm_plan

      // Format the synopsis text
      const synopsis = `
ARTICLE SYNOPSIS
================

Title: ${props.article.title}
Ticker: ${llmPlan.ticker || 'N/A'}
Sector: ${llmPlan.sector || 'N/A'}
Published: ${format(new Date(props.article.published_at), 'PPpp')}
Source: ${props.article.source_name} (${props.article.url})

STANCE
======
${llmPlan.stance || 'N/A'}

SIMPLE EXPLANATION
==================
${llmPlan.simple_explanation || 'N/A'}

SUMMARY
=======
${llmPlan.summary || 'N/A'}

KEY FACTS
=========
${Array.isArray(llmPlan.key_facts) ? llmPlan.key_facts.map((fact: string, i: number) => `${i + 1}. ${fact}`).join('\n') : 'N/A'}

RISKS
=====
${Array.isArray(llmPlan.risks) ? llmPlan.risks.map((risk: string, i: number) => `${i + 1}. ${risk}`).join('\n') : 'N/A'}

CONFIDENCE
==========
${llmPlan.confidence_0to1 ? (llmPlan.confidence_0to1 * 100).toFixed(0) + '%' : 'N/A'}

---
Generated by News Tunneler on ${format(new Date(), 'PPpp')}
`.trim()

      // Create blob and download
      const blob = new Blob([synopsis], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const link = document.createElement('a')

      // Generate filename
      const ticker = llmPlan.ticker || `article-${props.article.id}`
      const date = format(new Date(props.article.published_at), 'yyyy-MM-dd')
      link.download = `synopsis-${ticker}-${date}.txt`

      link.href = url
      link.click()

      // Cleanup
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Error downloading synopsis:', error)
      alert('Failed to download synopsis. The article may not have been analyzed yet.')
    }
  }

  return (
    <tr class="border-b border-white/10 dark:border-white/5 hover:bg-white/40 dark:hover:bg-white/5 transition-all duration-200 group">
      <td class="px-4 py-4">
        <a
          href={props.article.url}
          target="_blank"
          rel="noopener noreferrer"
          class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-semibold group-hover:underline transition-all"
        >
          {props.article.title}
        </a>
      </td>
      <td class="px-4 py-4 text-sm text-gray-600 dark:text-gray-400">
        {props.article.summary?.substring(0, 100)}...
      </td>
      <td class="px-4 py-4 text-sm">
        <span class="badge-glass text-xs">
          {props.article.source_name}
        </span>
      </td>
      <td class="px-4 py-4 text-sm">
        {props.article.ticker_guess && (
          <span class="badge-primary text-xs font-bold">
            {props.article.ticker_guess}
          </span>
        )}
      </td>
      <td class={`px-4 py-4 text-sm font-bold ${scoreColor()}`}>
        <div class="flex items-center gap-1">
          <span class="text-lg">{props.article.score?.toFixed(1)}</span>
          {(props.article.score || 0) >= 18 && <span class="text-xs">ðŸ”¥</span>}
        </div>
      </td>
      <td class="px-4 py-4 text-sm text-gray-600 dark:text-gray-400">
        {formatDistanceToNow(new Date(props.article.published_at), { addSuffix: true })}
      </td>
      <td class="px-4 py-4">
        <div class="flex space-x-2">
          {props.onAnalyze && (
            <button
              onClick={() => props.onAnalyze!(props.article.id)}
              class="btn-purple text-xs px-3 py-1.5"
            >
              Analyze
            </button>
          )}
          <button
            onClick={handleDownloadSynopsis}
            class="btn-success text-xs px-3 py-1.5"
            title="Download Synopsis"
          >
            ðŸ“„
          </button>
        </div>
      </td>
    </tr>
  )
}

